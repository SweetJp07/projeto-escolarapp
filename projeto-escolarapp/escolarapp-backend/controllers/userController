
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const userModel = require('../models/userModel'); 

exports.register = async (req, res) => {
  const { username, password, cpf, email, address, role } = req.body;

  if (!username || !password || !cpf || !email || !role) {
    return res.status(400).json({ message: 'Todos os campos obrigatórios devem ser preenchidos!' });
  }

  try {
    const existingUsers = await userModel.findExistingUser(username, cpf, email);

    if (existingUsers.length > 0) {
      return res.status(409).json({ message: 'Usuário, CPF ou E-mail já cadastrado!' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await userModel.createUser(username, hashedPassword, cpf, email, address, role);

    return res.status(201).json({ message: 'Usuário cadastrado com sucesso!' });

  } catch (err) {
    
    
    console.error("!!! ERRO NO REGISTRO:", err); 

    if (err.code) {
      switch (err.code) {
        case 'ER_DUP_ENTRY':
          return res.status(409).json({ 
            message: 'Conflito: Usuário, CPF ou E-mail já existe.',
            errorCode: err.code 
          });

        case 'ER_DATA_TRUNCATED':
        case 'ER_TRUNCATED_WRONG_VALUE_FOR_FIELD':
          return res.status(400).json({ 
            message: 'Dados inválidos. Verifique se o "role" está correto (aluno, responsavel, etc).',
            errorCode: err.code 
          });
        
        case 'ER_BAD_NULL_ERROR':
           return res.status(400).json({ 
            message: 'Um campo obrigatório foi enviado como nulo.',
            errorCode: err.code 
          });
      }
    }

    return res.status(500).json({ message: 'Erro interno no servidor!' });
  }
};

exports.login = async (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ message: 'Usuário e senha são obrigatórios!' });
  }

  try {
    const user = await userModel.findByUsername(username);

    if (!user) {
      return res.status(401).json({ message: 'Credenciais inválidas!' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Credenciais inválidas!' });
    }

    const token = jwt.sign(
      { 
        id: user.id, 
        role: user.role 
      },
      process.env.JWT_SECRET,
      { 
        expiresIn: '8h'
      } 
    );

    return res.status(200).json({ token: token });

  } catch (err) {
    console.error("Erro no login:", err);
    return res.status(500).json({ message: 'Erro interno no servidor!' });
  }
};